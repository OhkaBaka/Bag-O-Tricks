<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
		<title>Image Turn</title>

		<style>
			.f_container {
				display: block;
				position: absolute;
			}
			.f_segment {
				display: block;
				position: absolute;
				overflow: hidden;
				top: 0px;
			}
			.f_segment img {
				position: absolute;
				top: 0px;
				left: 0px;
			}
			#turnScroll{
				font: normal 10pt/14pt Verdana, Arial, Helvetica, sans-serif;
				position:absolute;
				display: block;
				left: 20px;
				top: 20px;
				width: 250px;
				height: 50px;
				border: 1px solid black;
				background-color:#BBDDBB;
				color:#003300;
				padding: 0px;
				text-align: center;
			}

			#turnScrollInner{
				position:relative;
				display: block;
				overflow-x: scroll;
				overflow-y: hidden;
				padding: 0px;
				margin: 0px 5px 2px 5px;
			}

			#turnScrollInner div {
				position:relative;
				display: block;
				width: 420px;
				height: 2px;
				padding: 0px;
				margin: 0px;
			}
			
			#textBlurb{
				font: normal 8pt Verdana, Arial, Helvetica, sans-serif;
				position:absolute;
				display: block;
				right: 20px;
				bottom: 20px;
				width: 300px;
				border: 1px solid black;
				background-color:#BBDDBB;
				color:#003300;
				padding: 0px;
			}
			#textBlurb p {
				margin: 10px;
			}
			#textBlurb h5 {
				font: bold 6pt Verdana, Arial, Helvetica, sans-serif;
				margin: 5px 10px 0px 10px; text-align:left;
			}
			#textBlurb h6 {
				font: normal 6pt Verdana, Arial, Helvetica, sans-serif;
				margin: 2px 10px 5px 20px; text-align:left;
			}
			
		</style>
		<!--- LAZY! For 2 friggin commands... sigh... script type="text/javascript" src="prototype.js" ></script --->
		<script language="javascript">
			IMAGE_SEGMENTS = 10;

			i_image=new Image();
			i_image.src="";

			//SIMPLE ELEMENT SELECTOR
			//SIMPLE ELEMENT SELECTOR
			var $ = function(a){
				return document.getElementById( a );
			}

			//SIMPLE EVENT MANAGEMENT
			//SIMPLE EVENT MANAGEMENT
			var eventAdd = function( elm, evt, func ){
				if( typeof( elm ) == "string" ) tElement = $( elm );
				else if( typeof( elm ) == "object" ) tElement = elm;
				
				if ( tElement.addEventListener ) {
					tElement.addEventListener( evt, func, false);
				} else if( tElement.attachEvent ){
					tElement.attachEvent ("on"+evt, func);
				} else {
					eval( "tElement.on" + evt + " = func" );
				}
			}

			window.size = function(){
				var w = 0;
				var h = 0;
				if(!window.innerWidth){ // WINDOW PANE SIZE CROSS-BROWSER SIZE FUNCTION
					if(!(document.documentElement.clientWidth == 0)) {// IE STRICT
						w = document.documentElement.clientWidth;
						h = document.documentElement.clientHeight;
					} else { // IE QUIRKS
						w = document.body.clientWidth;
						h = document.body.clientHeight;
					}
				} else { // NOT IE
					w = window.innerWidth;
					h = window.innerHeight;
				}
				return {width:w,height:h};
			}

			function flipImage(){
				// STEP 1 : Build a wickity wild 2d plane rotation dealy thingamajig
				var domImgIn = document.createElement('img');
				if( arguments.length ){
					if( arguments.length == 1 && typeof( arguments[0] ) == "string" ){
						domImgIn = $( arguments[0] );
					} else if( arguments.length == 1 && typeof( arguments[0] ) == "object" && Object.isElement( arguments[0] ) ){
						domImgIn = arguments[0];
					}
				}

				this.center = function(){
					window.console.log( this );
					this.container.style.left = Math.round( ( window.size().width / 2 ) - ( thisImgWidth / 2 ) ) + 'px';
				};

				this.flipTo = function(){
					if( arguments.length && arguments[0] >= -90 && arguments[0] <= 90 ){
						this.flipAngle = arguments[0];
						this.flipToAngle = arguments[0];
					} else {
						if( this.flipAngle < this.flipToAngle ){
							if( this.flipAngle + this.flipStep >= this.flipToAngle ){
								this.flipAngle = this.flipToAngle;
							} else {
								this.flipAngle = this.flipAngle + this.flipStep;
							}
						} else {
							if( this.flipAngle - this.flipStep <= this.flipToAngle ){
								this.flipAngle = this.flipToAngle ;
							} else {
								this.flipAngle = this.flipAngle - this.flipStep;
							}
						}
					}
					
					containerWidth = 0;
					if( this.flipAngle >= -90 && this.flipAngle <= 90 ){
						 // turnPercentage: percent of flipAngle between 100% [0 degrees] and the minimum perceptual depth percentage at this.minDepth [+-90 degrees]
						turnPercentage = ( 90 - Math.abs( this.flipAngle ) ) * ( 100 / 90 ) / 100 ;
						minSegHeight = ( ( turnPercentage * ( 1 - this.minDepth ) ) + this.minDepth ) * this.segBaseHeight;
						thisImgWidth = turnPercentage * this.baseWidth;
						thisSegWidth = turnPercentage * this.segBaseWidth;
						if( this.flipAngle < 0 ) {
							otherDir = 'right';
							pivotDir = 'left';
						} else {
							otherDir = 'left';

							pivotDir = 'right';
						}
						for( var segix=0; segix<this.imageSegments; segix++){

							if( pivotDir == 'left' ) ix = segix;
							else ix = (this.imageSegments - segix)-1;

							thisSegHeight = ( ( this.segBaseHeight - minSegHeight ) / this.imageSegments * segix ) + minSegHeight;

							thisSegTop = ( this.segBaseHeight - thisSegHeight ) / 2; 

							this.segments.wrappers[ ix ].style.height = thisSegHeight + 'px';
							this.segments.wrappers[ ix ].style.width = thisSegWidth + 'px';
							this.segments.wrappers[ ix ].style[otherDir] = 'auto';
							this.segments.wrappers[ ix ].style[pivotDir] = ( thisSegWidth * segix ) + 'px';
							this.segments.wrappers[ ix ].style.top = thisSegTop + 'px';
	
							this.segments.images[ ix ].style.left = ( thisSegWidth * ix ) * -1  + 'px';
							this.segments.images[ ix ].style.width = thisImgWidth + 'px';
							this.segments.images[ ix ].style.height = thisSegHeight + 'px';
	
						}

						this.container.style.width = thisImgWidth + 'px';
						this.center();

					}
				}
				this.minDepth = .4;
				this.imageSegments = 20;
				this.flipToAngle = 0;
				this.flipAngle = 0;
				this.flipStep = 5;
				this.baseWidth = domImgIn.width;
				this.baseTop = 50;
				this.segBaseWidth = Math.ceil( domImgIn.width / this.imageSegments );
				this.segBaseHeight = domImgIn.height;
				this.parentCt = domImgIn.parentNode;
				this.elementId = domImgIn.id;
				this.src = domImgIn.src;

				this.segments = { wrappers:[], images:[] };
				this.turned = 0;

				this.container = document.createElement('div');
				this.container.className = 'f_container';
				this.container.style.height = domImgIn.height + 'px';

				for( var ix=0; ix<this.imageSegments; ix++){
					this.image = document.createElement('img');
					this.image.src = this.src;
					this.image.id = this.elementId + "_" + ix + "i";
					this.segments.images.push( this.image );

					this.wrapper = document.createElement('div');
					this.wrapper.id = this.elementId + "_" + ix;
					this.wrapper.className = 'f_segment';
					this.segments.wrappers.push( this.wrapper );

					this.wrapper.appendChild( this.image );
					this.container.appendChild( this.wrapper );
				}

				this.flipAngle = 0;
				this.flipToAngle = 0;
				this.flipTo();

				this.parentCt.removeChild( domImgIn );
				this.container.id = this.elementId;
				this.parentCt.appendChild( this.container );

				this.mySelf = (function(){
					var self = this;
					function findMyself(){
						for( wx in window ) {
							window.console.log( wx );
							if( self == window[ wx ] ) window.console.log( window[ wx ] );
						}
					}
					this.hTimer = window.setTimeout(findMyself, 1000);
				})();

/*
startTimer = function() {
  var self = this;
  function updateTimer() {
  	alert( 'Hello!' )
    self.hTimer = window.setTimeout(updateTimer, 5000)
  }
  this.hTimer = window.setTimeout(updateTimer, 5000)
}
*/


	//eventAdd( window, "resize", selfRef.center );
	//			return this;
			}

			panFlip = function(){
				// STEP 2 : The flippable is neat, but it doesn't have the panning feature I want.  I don't want to force the panning feature onto the flippable though.
				flipImage.call( this, arguments[0] );
				this.pan = function(){
					alert( "Yeah, you did that right" );
				}
			}

			scrollPos = 0;
			scrollPoll = function(){
				var panPos;
				if( typeof( $( "turnScrollInner" ).scrollLeft ) != "undefined" ) panPos = $( "turnScrollInner" ).scrollLeft - 90;
				else panPos = $( "turnScrollInner" ).pageXOffset - 90;
				$( "degreesAt" ).innerHTML = panPos+"&deg;";
			}

			doLoaded = function(){
				vista = new panFlip( "flipImage_0" );
				setInterval( scrollPoll, 200 );
			}
			eventAdd( window, "load", doLoaded );

		</script>

	</head>
	
	<body>
		<img src="http://www.introprod.com/samples/bella/image/small_beachview6.jpg" id= "flipImage_0" />
		<div id="turnScroll" >
			<span>SCROLL TO PAN IMAGE: </span><span id="degreesAt">-90</span><br />
			<div id="turnScrollInner" >
				<div>&nbsp;</div>
			</div>
		</div>
		<div id="textBlurb" >
			<p >
				<em>Every</em> other website IN THE WORLD would have done that page in Flash.<br />
				99.5% of all developers IN THE WORLD wouldn't care that it could be done in JS.<br />
				Oh my God... it has an easter egg, and the dial goes to 11.<br />
				<!--- If I don't get this job, I may never recover. --->
			</p>
			<p>I honestly thought I was alone.</p>
			<h5>christopher travis trulove</h5>
			<h6>on facebook about www.WallSt.com/people.asp</h6>
		</div>
	</body>
</html>