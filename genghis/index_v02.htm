<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<title>GEngHIS - Game Engine Heuristic Interface System</title>
	<LINK REL="SHORTCUT ICON" HREF="/samples/genghis/genghis200.ico" />
	<style>
		.boardDiv, .boardDiv div { margin: 0; padding: 0px; border: none; overflow:hidden; }
		.boardDiv{ position: relative; }
		.columnDiv{ position: absolute; top:0px; overflow:hidden; }
		.tileDiv { position: absolute; left:0px; }
		.dirlink { display: block; height: 100%; width: 100%; color:#CCCCCC; font: bold 12pt Verdana, Arial, Helvetica, sans-serif; text-decoration:none; text-align: center; margin: 0px; padding: 3px;}

		.base{ position: absolute; top:0; left:0; z-index:1; }
		.terrain { position: absolute; top:0; left:0; z-index:2; }
		.text{ position: absolute; top:0; left:0; z-index:3; color: white; font: bold 10px "Courier New", Courier, mono; text-align:center; }
	</style>
	<script type="text/javascript" src="../prototype.js" ></script>
	<script language="javascript" type="text/javascript">

		function genghis(){
			//SET UP PASS CONSTANTS:
			NONE = 0;//000
			WATER = 1;//001
			LAND = 2;//010
			WATER_LAND = 3;//011
			AIR = 4; //100
			WATER_AIR = 5;//101
			LAND_AIR = 6;//110
			WATER_LAND_AIR = 7;//111

			//		07 08 09      14               		NW NN NE      PN
			//		04 05 06   10 11 12 13  00          WW CC EE   PW PC PH PE  FL
			//		01 02 03      15                    SW SS SE      PV
			//		              16                                  PS
			//      Border Positions:
			//		112 241 193       064             
			//		124 255 199   016 085 017 001  000
			//		028 031 007       068             
			//		                  004             
			this.tilePositions = [ 'FL','SW','SS','SE','WW','CC','EE','NW','NN','NE','PW','PC','PH','PE','PN','PV','PS' ];
			/* 17 Tile Set */
//			this.borderPositions = [
//				/* 00 */[0,2,8,10,32,34,40,128,130,136,160],
//				/* 01 */[28],
//				/* 02 */[31],
//				/* 03 */[7],
//				/* 04 */[124,254],
//				/* 05 */[255],
//				/* 06 */[199],
//				/* 07 */[112],
//				/* 08 */[113,209,241],
//				/* 09 */[193],
//				/* 10 */[16,24,40,48],
//				/* 11 */[85],
//				/* 12 */[17],
//				/* 13 */[1,3,129,131],
//				/* 14 */[64],
//				/* 15 */[68],
//				/* 16 */[4]
//			];
			/* 9 Tile Set */
			this.borderPositions = [
				/* 00 */[0,2,8,10,32,34,40,128,130,136,160,/* 10+ */16,24,40,48,85,17,1,3,129,131,64,68,4],
				/* 01 */[28],
				/* 02 */[31,63,159,191],
				/* 03 */[7],
				/* 04 */[124,254],
				/* 05 */[255],
				/* 06 */[199],
				/* 07 */[112,120,140,148,150],
				/* 08 */[113,209,241],
				/* 09 */[193],
				/* 10+*/[],[],[],[],[],[],[]
			];

			this.tileType = function( inVars ){
				if( typeof inVars.path == 'undefined' && typeof this.imagePath == 'string' ) inVars.path = this.imagePath;

				if( typeof inVars.base == 'undefined' ) inVars.isbase = true;
				else inVars.isbase = false;

 				var tileObject={ pass: inVars.pass, isbase: inVars.isbase, positions:[ 'FL','SW','SS','SE','WW','CC','EE','NW','NN','NE','PW','PC','PH','PE','PN','PV','PS' ] };
				posSet=[];
				if( typeof inVars.positions == 'number' ) for( var lix=0; lix<=inVars.positions; lix++ ) posSet.push( lix );
				if( typeof inVars.positions == 'string' ) posSet=inVars.positions.split(',');

				//Convert Code Letter Names to Integer Values
				for( var fix=0; fix<posSet.length; fix++) for( var pix=0; pix<=16; pix++ ) if( posSet[fix] == this.tilePositions[ pix ]) posSet[fix] == pix;

				//Build tileObject
				for( pix=0; pix<=16; pix++ ) for( fix=0; fix<posSet.length; fix++) {
					if( posSet[fix] == pix ){
						tileObject.positions[ pix ] = document.createElement( 'div' ) ;
						tileObject.positions[ pix ].className = "tileDiv";
						tileObject.positions[ pix ].style.width = inVars.width + "px";
						tileObject.positions[ pix ].style.height = inVars.height + "px";

						if( pix != 5 ){
							baseImage = document.createElement('img');
							baseImage.src = inVars.path + inVars.base + "_05.png";
							baseImage.className = "base";
							tileObject.positions[ pix ].appendChild( baseImage );
							layerImage = document.createElement('img');
							layerImage.src = inVars.path + inVars.name + "_" + pix.toPaddedString(2) +".png";
							layerImage.className = "terrain";
							tileObject.positions[ pix ].appendChild( layerImage );
						}else{
							baseImage = document.createElement('img');
							baseImage.src = inVars.path + inVars.name + "_05.png";
							baseImage.className = "base";
							tileObject.positions[ pix ].appendChild( baseImage );
							layerImage = document.createElement('img');
							layerImage.src = inVars.path + "blank_05.png";
							layerImage.className = "terrain";
							tileObject.positions[ pix ].appendChild( layerImage );
						}
						if( typeof( inVars.embellishment ) == 'array' && inVars.embellishment[ pix ] !='') alert( 'embellishment' );
					}
				}
				return tileObject;
			}


			this.tileInit = function( tHeight, tWidth ){
				var tile = new Object();
				tile.div = document.createElement('div');
				tile.div.className = "tileDiv";
				tile.div.style.width = tWidth + "px";
				tile.div.style.height = tHeight + "px";
				return tile.div;
			}
			this.viewInit = function( vWidth, vHeight, tWidth, tHeight ) {
				var viewObject = new Object;
				viewObject.isReady = false;

				viewObject.width = vWidth;
				viewObject.height = vHeight;
				viewObject.div = document.createElement('div');
				viewObject.div.className = "boardDiv";
				viewObject.div.style.width = tWidth * vWidth + "px";
				viewObject.div.style.height = tHeight * vHeight + "px";
				for( var cix=0; cix<vWidth; cix++ ){
					var colDiv = document.createElement('div');
					colDiv.className = "columnDiv";
					colDiv.style.height = tHeight * vHeight + "px";
					colDiv.style.width = tWidth + "px";
					colDiv.style.left = tWidth * cix + "px";
					
					for( var tix=0; tix<vHeight; tix++ ) {
						//build frame DIV
						colDiv.appendChild( this.tileInit( tWidth, tHeight ) );
						tileDiv = colDiv.lastChild;
						tileDiv.style.top = tHeight * tix + "px";
						tileDiv.id = cix + "_" + tix;

						//build base IMG
						baseImage = document.createElement('img');
						baseImage.id = "base_" + cix + "_" + tix;
						baseImage.className = "base";

						//build terrain IMG
						terrainImage = document.createElement('img');
						terrainImage.id = "terrain_" + cix + "_" + tix;
						terrainImage.className = "terrain";

						//build text layer div
						textDiv = document.createElement('div');
						textDiv.id = "text_" + cix + "_" + tix;
						textDiv.className = "text";

						tileDiv.appendChild( baseImage );
						tileDiv.appendChild( terrainImage );
						tileDiv.appendChild( textDiv );
					}
					viewObject.div.appendChild( colDiv );
				}
				return viewObject;
			}

			this.moveView = function( ){
				if( arguments.length <= 0 && arguments.length >= 5 ){
					alert( "Genghis.moveView takes 0 to 4 arguments:\nmoveView( [map],[viewport],(s|se|sw|w|e|n|nw|ne)\nmoveView( [map],[viewport],[toX,toY]\n* map and viewport default to genghis.maps[0] and genghis.views[0]\n* toX,toY represent locations on map move to in one step\n* toX,toY default to the map's initx and inity" );
					return false;
				} else {
					if( typeof arguments[ arguments.length - 1 ] == 'string' ){
						argCount=arguments.length-1;
						targetMap = this.maps[ 0 ];
						targetView = this.views[ 0 ];
						if( argCount == 1 ) {
							if( typeof arguments[0] == 'number' ) targetMap = this.maps[ arguments[0] ];
							else if( typeof arguments[0] == 'object' ) targetMap = arguments[0];
						} else if( argCount == 2 ) {
							if( typeof arguments[0] == 'number' ) targetMap = this.maps[ arguments[1] ];
							else if( typeof arguments[0] == 'object' ) targetMap = arguments[1];
						}
						if( arguments[arguments.length - 1].toLowerCase().search( /(s|se|sw)/ ) == 0 ) targetY = targetMap.currentY + 1;
						if( arguments[arguments.length - 1].toLowerCase().search( /(n|ne|nw)/ ) == 0 ) targetY = targetMap.currentY - 1;
						if( arguments[arguments.length - 1].toLowerCase().search( /(e|ne|se)/ ) == 0 ) targetX = targetMap.currentX + 1;
						if( arguments[arguments.length - 1].toLowerCase().search( /(w|nw|sw)/ ) == 0 ) targetX = targetMap.currentX - 1;
					}else if( arguments.length == 1 && ( typeof arguments[ 0 ] == 'object' || typeof arguments[ 0 ] == 'number' ) ){
						if( typeof arguments[ 0 ] == 'number' ) targetMap = this.maps[ arguments[ 0 ] ];
						else targetMap = arguments[ 0 ];
						targetView = this.views[ 0 ];
						targetX = targetMap.initX;
						targetY = targetMap.initY;
					}else if( arguments.length >= 2 && typeof arguments[ arguments.length - 1 ] == 'number' && typeof arguments[ arguments.length - 2 ] == 'number' ){
						argCount=arguments.length-2;
						targetMap = this.maps[ 0 ];
						targetView = this.views[ 0 ];
						if( argCount == 1 ) {
							if( typeof arguments[0] == 'number' ) targetMap = this.maps[ arguments[0] ];
							else if( typeof arguments[0] == 'object' ) targetMap = arguments[0];
						} else if( argCount == 2 ) {
							if( typeof arguments[0] == 'number' ) targetMap = this.maps[ arguments[1] ];
							else if( typeof arguments[0] == 'object' ) targetMap = arguments[1];
						}
						targetX = arguments[arguments.length - 1];
						targetY = arguments[arguments.length - 2];
						argCount=arguments.length-2;
					} else if(arguments.length == 0){
						targetMap = this.maps[ 0 ];
						targetView = this.views[ 0 ];
						targetX = targetMap.initX;
						targetY = targetMap.initY;
					} else {
						alert( "Wrong Options:\n" + typeof arguments[0] + "\n" + typeof arguments[1] + "\n" + typeof arguments[2] + "\n" + typeof arguments[3]  );
						return false;
					}
				}

				//abandon proc if already in motion
				if( typeof targetView.isMoving == 'undefined' ) targetView.isMoving = true;
				else if( targetView.isMoving ) return false;

				targetWidth = targetMap.layout.length;
				targetHeight = targetMap.layout[0].length;

				if( targetX + targetMap.currentX > targetMap.width ) targetX = targetMap.width - targetView.width;
				if( targetY + targetMap.currentY > targetMap.height ) targetY = targetMap.width - targetView.height;
				if( targetX < 0 ) targetX = 0;
				if( targetY < 0 ) targetY = 0;

				if( typeof targetMap.currentX == 'undefined' || targetMap.currentX != targetX || targetMap.currentY != targetY ){
					for( var cix=0; cix < targetView.width; cix++){
						for( var tix=0; tix < targetView.height; tix++){

							thisTileType = targetMap.layout[cix+targetX][tix+targetY];
							thisViewTile = targetView.div.childNodes[ cix ].childNodes[ tix ];

							posCalc = 0;
							if( this.tiles[ thisTileType ].isbase ) thisTilePos = 5;
							else {
								//Find the right tile border position: Check cardinal neighbors for matchings, pick position based on that.
								if( cix == 0 || targetMap.layout[cix-1][tix] == thisTileType ) posCalc+=1;
								if( cix == 0 || tix == 0 || targetMap.layout[cix-1][tix-1] == thisTileType ) posCalc+=2;
								if( tix == 0 || targetMap.layout[cix][tix-1] == thisTileType ) posCalc+=4;
								if( cix == targetMap.width || tix == 0 || targetMap.layout[cix+1][tix-1] == thisTileType ) posCalc+=8;
								if( cix == targetMap.width || targetMap.layout[cix+1][tix] == thisTileType ) posCalc+=16;
								if( cix == targetMap.width || tix == targetMap.height || targetMap.layout[cix+1][tix+1] == thisTileType ) posCalc+=32;
								if( tix == targetMap.height || targetMap.layout[cix][tix+1] == thisTileType ) posCalc+=64;
								if( cix == 0 || tix == targetMap.height || targetMap.layout[cix-1][tix+1] == thisTileType ) posCalc+=128;
								
								//Convert Binary Border Value To Integer Tile Position
								thisTilePos = 5; // If all Else Fails (pos not listed in set (given that only 17 of 255 positions are standard) set to 5 )
								for( var pix=0; pix<=16; pix++ ){
									for( var vix=0;vix<this.borderPositions[ pix ].length; vix++) {
										if( posCalc == this.borderPositions[ pix ][vix]) thisTilePos = pix;
									}
								}
							}
							$( "base_" + cix + "_" + tix ).src = this.tiles[ thisTileType ].positions[ thisTilePos ].childNodes[0].src;
							$( "terrain_" + cix + "_" + tix ).src = this.tiles[ thisTileType ].positions[ thisTilePos ].childNodes[1].src;
							$( "text_" + cix + "_" + tix ).innerHTML = posCalc;
						}
					}
					targetMap.currentX = targetX;
					targetMap.currentY = targetY;
				}
				targetView.isMoving = false;
			}

			this.loadView = function(){
				if( arguments.length == 1 ) {
					appendToDiv = $( arguments[0] );
					appendToChild = this.views[0];
				} else if( arguments.length == 2 ) {
					appendToDiv = $( arguments[0] );
					appendToChild = this.views[ arguments[1] ];
				} else {
					appendToDiv = document.body;
					appendToChild = this.views[0];
				}
				appendToDiv.appendChild( appendToChild.div );
				return true;
			}

			this.buildmap = function( mapOb ){
				this.maps.push( mapOb );
				this.moveView( this.maps[ this.maps.length-1 ] );
			}

			//New Genghis Instance Init Functions and Vars
			this.maps=[];
			this.views=[];
			if( arguments.length == 1 && typeof( arguments[0] ) == 'object' ) {
				this.views[0] = this.viewInit( arguments[0].vWidth, arguments[0].vHeight, arguments[0].tWidth, arguments[0].tHeight );
				if( typeof( arguments[0].imagePath ) == 'string' ) this.imagePath = arguments[0].imagePath;
			} else if( arguments.length == 1 && typeof( arguments[0] ) == 'string' ) {
				this.views[0] = this.viewInit( 10,10,32,32 );
			} else if( arguments.length >= 4 ) {
				this.views[0] = this.viewInit( arguments[0],arguments[1],arguments[2],arguments[3] );
				if( typeof arguments.length == 5 && typeof arguments[4] == 'string' ) this.imagePath = arguments.imagePath;
			}
		}

		tG = new genghis( { vWidth: 7, vHeight: 7, tWidth: 24, tHeight: 24, imagePath:'http://introprod.com/samples/genghis/images/' } );
		
		tG.tiles = {
			blank : tG.tileType( { height: 24, width:24, name: 'blank', positions: "5", pass: tG.NONE } ),
			dirt : tG.tileType( { height: 24, width:24, name: 'dirt', positions: "5", pass: tG.WATER_LAND_AIR } ),
			path : tG.tileType( { height: 24, width:24, name: 'path', base: 'dirt', positions: 9, pass: tG.LAND_AIR } )
		};

		testmap = {
			name: "testmap",
			targetBoard: "",
			initX: 0,
			initY: 0,
			layout: [
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt' ],
				[ 'dirt','path','dirt','path','path','path','path','path','path','path','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt' ],
				[ 'dirt','path','path','path','path','path','path','path','path','path','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt' ],
				[ 'dirt','path','path','path','path','path','path','path','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt' ],
				[ 'dirt','path','path','path','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt' ],
				[ 'dirt','path','dirt','dirt','dirt','path','path','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','path','path','dirt','dirt','path','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt' ],
				[ 'dirt','dirt','dirt','dirt','dirt','path','path','path','dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','dirt','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','path','dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ],
				[ 'dirt','dirt','dirt','dirt','dirt','dirt','dirt','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path','path' ]
			]
		};

		Event.observe( window, 'load', function(){
			tG.loadView( "mainwindow" ) ;
			tG.buildmap( testmap );
		});
/*
*/
	
	</script>
</head>

<body>
	<table>
		<tr>
			<td><a href="javascript:void(0);" class="dirlink" onclick="tG.moveView( 0, 'nw')">NW</a></td>
			<td><a href="javascript:void(0);" class="dirlink" onclick="tG.moveView( 0, 'n')">N</a></td>
			<td><a href="javascript:void(0);" class="dirlink" onclick="tG.moveView( 0, 'ne')">NE</a></td>
		</tr>
		<tr>
			<td><a href="javascript:void(0);" class="dirlink" onclick="tG.moveView( 0, 'w')">W</a></td>
			<td><div id="mainwindow"></div></td>
			<td><a href="javascript:void(0);" class="dirlink" onclick="tG.moveView( 0, 'e')">E</a></td>
		</tr>
		<tr>
			<td><a href="javascript:void(0);" class="dirlink" onclick="tG.moveView( 0, 'sw')">SW</a></td>
			<td><a href="javascript:void(0);" class="dirlink" onclick="tG.moveView( 0, 's')">S</a></td>
			<td><a href="javascript:void(0);" class="dirlink" onclick="tG.moveView( 0, 'se')">SE</a></td>
		</tr>
	</table>
</body>
</html>
